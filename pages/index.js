import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import React from 'react';

import { LegalDataSection } from '/components/LegalDataSection.js';
import {FinancialDataSection} from '../components/FinancialDataSection';
import {IndicatorSection} from '../components/IndicatorSection';

import {Session} from '/src/Session.js';

import { metaIndicators } from '../lib/indic';
const indics = ["eco","art","soc","knw","dis","geq","ghg","mat","was","nrg","wat","haz"];


export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>METRIZ by La Société Nouvelle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.jpg" />
      </Head>

      <Metriz/>
      
    </div>
  )
}

class Metriz extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      session: new Session(),
      selectedSection: "legalData",
    }
  }

  render() {

    const session = this.state.session;
    const selectedSection = this.state.selectedSection;

    return (
      <div className="app-view">
        <Menu selectedSection={selectedSection} 
              changeSection={this.changeSection.bind(this)}
              downloadSession={this.downloadSession.bind(this)}
              importSession={this.importSession.bind(this)}/>
        <div className="section-container">
          {this.buildSectionView()}
        </div>
      </div>
    )
  }

  updateSession(session) {
    this.setState({session: session});
  }

  changeSection(section) {
    this.setState({selectedSection: section});
  }

  buildSectionView() {
    switch(this.state.selectedSection)
    {
      case "legalData" : return(<LegalDataSection session={this.state.session}/>)
      case "financialData" : return(<FinancialDataSection session={this.state.session}/>)
      case "art" : return(<IndicatorSection session={this.state.session} indic="art"/>)
      case "dis" : return(<IndicatorSection session={this.state.session} indic="dis"/>)
      case "eco" : return(<IndicatorSection session={this.state.session} indic="eco"/>)
      case "geq" : return(<IndicatorSection session={this.state.session} indic="geq"/>)
      case "ghg" : return(<IndicatorSection session={this.state.session} indic="ghg"/>)
      case "haz" : return(<IndicatorSection session={this.state.session} indic="haz"/>)
      case "knw" : return(<IndicatorSection session={this.state.session} indic="knw"/>)
      case "mat" : return(<IndicatorSection session={this.state.session} indic="mat"/>)
      case "nrg" : return(<IndicatorSection session={this.state.session} indic="nrg"/>)
      case "soc" : return(<IndicatorSection session={this.state.session} indic="soc"/>)
      case "was" : return(<IndicatorSection session={this.state.session} indic="was"/>)
      case "wat" : return(<IndicatorSection session={this.state.session} indic="wat"/>)
    }
  }

  async downloadSession() {
    const session = this.state.session;
    const fileName = "svg_ese_"+session.getUniteLegale().siren; // To update
    const json = JSON.stringify(session);
    const blob = new Blob([json],{type:'application/json'});
    const href = await URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = href;
    link.download = fileName + ".json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  importSession(file) {
    this.read(file,this.importData.bind(this));
  }

  read(file,importData) {
    const reader = new FileReader();
    reader.onload = function fileReadCompleted() {
      const backUp = JSON.parse(reader.result);
      importData(backUp);
     };
    reader.readAsText(file);
  }

  async importData(backUp) {
    const session = new Session();
    await session.updateFromBackUp(backUp);
    this.setState({
      session: session,
      selectedSection: "legalData"});
  }

}

function Menu({selectedSection, changeSection, downloadSession, importSession}){

  const triggerImportFile = () => {document.getElementById('import-session').click()};
  const importFile = (event) => {importSession((event.target.files)[0])}
  
  return (
    <div className="menu">
      <h2>MENU</h2>
      <div className="menu-items">
        <div className="menu-items-group">
          <button className={"menu-button"+("legalData"==selectedSection ? " selected" : "")}
                  onClick = {() => changeSection("legalData")}>Unité Légale</button>
          <button className={"menu-button"+("financialData"==selectedSection ? " selected" : "")}
                  onClick = {() => changeSection("financialData")} >Données financières</button>
        </div>
        <div className="menu-items-group">
          {
            indics.map((indic) => { return (
              <button key={"menu-button-"+indic}
                      className={"menu-button"+(indic==selectedSection ? " selected" : "")}
                      onClick = {() => changeSection(indic)}>
                {metaIndicators[indic].libelleMenu}
              </button>
            )})
          }
        </div>
        <div className="menu-items-group">
          <button onClick = {() => downloadSession()} className="menu-button">Télécharger la session</button>
          <button onClick={triggerImportFile} className="menu-button">Importer un fichier</button>
          <input id="import-session" type="file" accept=".json" onChange={importFile} visibility="collapse"/>
        </div>
        <div className="menu-items-group">
          <button onClick={() => window.open("https://github.com/SylvainH-LSN/LaSocieteNouvelle-METRIZ-WebApp/blob/main/DOCUMENTATION.md","_blank")} className="menu-button">Documentation</button>
          <button onClick={() => window.open("https://github.com/SylvainH-LSN/LaSocieteNouvelle-METRIZ-WebApp","_blank")} className="menu-button">Code Source</button>
        </div>
      </div>
    </div>
  );
}

function Section({selectedSection,session,onUpdate}) {
  switch(selectedSection)
  {
    case "legalData" :      return(<LegalUnitSection      session={session}               onUpdate={onUpdate}/>)
    case "financialData" :  return(<FinancialDataSection  session={session}               onUpdate={onUpdate}/>)
    case "art" :            return(<IndicatorSection      session={session} indic="art"   onUpdate={onUpdate}/>)
    case "dis" :            return(<IndicatorSection      session={session} indic="dis"   onUpdate={onUpdate}/>)
    case "eco" :            return(<IndicatorSection      session={session} indic="eco"   onUpdate={onUpdate}/>)
    case "geq" :            return(<IndicatorSection      session={session} indic="geq"   onUpdate={onUpdate}/>)
    case "ghg" :            return(<IndicatorSection      session={session} indic="ghg"   onUpdate={onUpdate}/>)
    case "haz" :            return(<IndicatorSection      session={session} indic="haz"   onUpdate={onUpdate}/>)
    case "knw" :            return(<IndicatorSection      session={session} indic="knw"   onUpdate={onUpdate}/>)
    case "mat" :            return(<IndicatorSection      session={session} indic="mat"   onUpdate={onUpdate}/>)
    case "nrg" :            return(<IndicatorSection      session={session} indic="nrg"   onUpdate={onUpdate}/>)
    case "soc" :            return(<IndicatorSection      session={session} indic="soc"   onUpdate={onUpdate}/>)
    case "was" :            return(<IndicatorSection      session={session} indic="was"   onUpdate={onUpdate}/>)
    case "wat" :            return(<IndicatorSection      session={session} indic="wat"   onUpdate={onUpdate}/>)
  }
}
